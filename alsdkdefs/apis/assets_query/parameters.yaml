UrlParamAccountId:
  schema:
    type: string
  name: account_id
  in: path
  required: true
  description: |-
    The AIMS account ID whose assets are being accessed. Only valid account IDs are acceptable.
    Invalid account IDs result in an `HTTP 404 Not Found` or `HTTP 403 Forbidden`, depending on
    the client's access level.
UrlParamDeploymentId:
  schema:
    type: string
  name: deployment_id
  in: path
  required: true
  description: The ID of the deployment source as represented in the deployments service (uppercase UUID).
UrlParamAssetType:
  schema:
    type: string
  name: asset_type
  in: path
  required: true
  description: A valid asset type, e.g. `deployment`, `vpc`, `host`.
UrlParamScoreType:
  schema:
    type: string
  name: score_type
  in: path
  required: true
  description: A valid score type. Currently the only supported type is `tri`.
ParamAssetTypes:
  schema:
    type: string
  in: query
  name: asset_types
  description: |-
    A query string parameter representing the types of assets to retrieve, as described in
    [Typed queries](#typed-queries). `tag` asset type is handled specially and, if used,
    may only be the last asset type.
ParamQueryFormat:
  schema:
    type: string
    enum:
      - v1
      - v2
  in: query
  name: query_format
  description: 'A query string parameter that defines what query syntax is used. (default: `v1`)'
ParamReturnCount:
  schema:
    type: boolean
  in: query
  name: return_count
  description: 'Execute the query and return a single matching row count instead of the assets data itself. (default: `false`)'
ParamReduce:
  schema:
    type: boolean
  in: query
  name: reduce
  description: |-
    Callers should pass `reduce=true` to reduce repeated assets in the return data when
    possible. (default: `false`)
ParamQFields:
  schema:
    type: string
  in: query
  name: qfields
  description: |-
    Optional comma-separated list of fields to be returned as part of the objects. `key`, `type`
    and `deployment_id` are always returned. Both `&qfields=object.field` and `&qfields=field`
    are acceptable; in the latter case all objects will be filtered.
ParamFilter:
  schema:
    type: object
  in: query
  style: form
  example:
    'host.key': "/aws/host/i-123456789"
    'tag.tag_key': "Key"
  name: filter
  description: Filters and variables, as described in [Filtering assets](#filtering-assets).
ParamFilterRelationship:
  schema:
    type: object
  in: query
  style: form
  name: filter_relationships
  example:
    'region..vpc': "false"
  description: |-
    A constraint on the existence of a relationship between the given asset types. The lefthand
    asset_type must be present in the `asset_types` parameter. If set to `true`, only rows
    with an asset of the given `asset_type` that is related to one or more assets of the
    `related_asset_type` will be returned. If set to `false`, only rows with an asset of the
    given `asset_type` that is **not** related to one or more assets of the `related_asset_type`
    will be returned.
ParamDeploymentIds:
  schema:
    type: string
  in: query
  name: deployment_ids
  description: A comma-separated list of deployment IDs.
ParamRemediationItemIds:
  schema:
    type: string
  in: query
  name: remediation_item_ids
  description: A comma-separated list of remediation-item IDs.
ParamDisposed:
  schema:
    type: string
    enum:
      - "true"
      - "false"
      - all
    default: "false"
  in: query
  name: disposed
  description: |-
    Filters remediations included in the summary based on the state of vulnerabilities.
    Possible values are:

    * `true` - only disposed
    * `false` - only not disposed
    * `all` - both
ParamConcluded:
  schema:
    type: string
    enum:
      - "true"
      - "false"
      - all
    default: "false"
  in: query
  name: concluded
  description: |-
    Filters remediations included in the summary based on the state of vulnerabilities.
    Possible values are:

    * `true` - only concluded
    * `false` - only not concluded
    * `all` - both
ParamState:
  schema:
    type: string
  in: query
  name: state
  description: |-
    A comma-separated list of `remediation-item` states. If provided, only include `remediation-items`
    in any of the given states in the response.
ParamReturnTypes:
  schema:
    type: string
  in: query
  name: return_types
  description: |-
    A query string parameter representing the names of assets in `asset_types` to retrieve.
    The types are a comma-separated list of asset names that must be a subset of the names in
    `asset_types`. When `return_types` is provided, only the specified subset of `asset_types`
    is returned in each row. For example, if `asset_types` is `h:host,s:subnet,v:vpc` and
    `return_types` is `h,s`, assets will query for rows matching `host,subnet,vpc` but will only
    return the first two columns of each row in the result. This can be used to require
    relationships and provide filters around them without actually requiring that the data be
    returned.
ParamScope:
  schema:
    type: boolean
    default: false
  in: query
  name: scope
  description: Whether to apply scope when gathering assets with exposures to summarize.
ParamScopeTrue:
  schema:
    type: boolean
    default: true
  in: query
  name: scope
  description: |-
    Whether to apply scope when gathering assets to include in the report.
ParamExposuresSummaryFilter:
  schema:
    type: array
  style: form
  explode: true
  in: query
  name: filter
  description: |-
    Filters that assets/vulnerabilities must match to be included in the exposures summary.
    `filter`s can be chained together (applied using `AND`). Generally, any
    [remediation filters](#section/Remediation-filters) should work, but `category` and
    `severity` are the most likely useful filters for this view.
ParamExposuresSummaryDisposed:
  schema:
    type: string
    enum:
      - "true"
      - "false"
      - all
  in: query
  name: disposed
  description: |-
    Filters remediations included in the summary based on the state of vulnerabilities.
    Possible values are:
    
    * `true` - only disposed
    * `false` - only not disposed
    * `all` - both
ParamQueryRemediationItemsFilter:
  schema:
    type: array
  style: form
  explode: true
  in: query
  name: filter
  description: |-
    A filter to apply to the `remediation-items` in the account. Multiple filter parameters
    may be supplied. These filters are matched against the `filters` property of the
    `remediation-item` asset; all given filters must match). **Note** that the `category` filter is applied
    to `exposures` associated with each `remediation-item`, not applied to the `remediation-item`
    asset directly; the `remediation-item` will be included in the result if the combined `categories` of all
    exposures attached to the `remediation-item` match the category filter. See the section on
    [remediation filters](#section/Remediation-filters) which covers filters in detail.
ParamQueryRemediationItemsDetails:
  schema:
    type: boolean
    default: false
  in: query
  name: details
  description: |-
    Controls whether `vinstances` are returned in the response (inside each `exposure`
    in the `exposures` property of each `remediation-item`. In order to work,
    `include_exposures` must be set to `true`.
ParamQueryExposuresDetails:
  schema:
    type: boolean
    default: false
  in: query
  name: details
  description: |-
    Controls whether `vinstances` are returned in the response body. Only valid if
    `group` is **not** `asset`.
ParamQueryExposuresFilter:
  schema:
    type: array
  style: form
  explode: true
  in: query
  name: filter
  description: |-
    A filter to apply to the assets for which remediations and vulnerabilities are
    being requested. Multiple filter parameters may be supplied. The section on
    [remediation filters](#section/Remediation-filters) above covers them in detail.
    *Note*: hosts may be used as filters (e.g. `filter=host:/aws/us-east-1/host/i-1234567`),
    which will restrict the scope of the remediations return to just the single host key
    provided. However, hosts will not be returned as filters in remediations responses
    (returning all hosts as filters would be untenable in a deployment of significant size).
ParamQueryExposuresGroup:
  schema:
    type: string
    default: remediation
    enum:
      - asset
      - exposure
      - remediation
  in: query
  name: group
  description: |-
    The object type to arrange the vulnerabilities in the response by. Allowed values are:
    * `asset`: group vulnerabilities by vulnerable asset
    * `exposure`: group vulnerabilities by exposure
    * `remediation`: group vulnerabilities by remediation
ParamIncludeFilters:
  schema:
    type: boolean
    default: true
  in: query
  name: include_filters
  description: Controls whether `filters` are returned.
ParamIncludeRemediations:
  schema:
    type: boolean
    default: true
  in: query
  name: include_remediations
  description: Controls whether `remediations` are returned.
ParamIncludeRemediationItems:
  schema:
    type: boolean
    default: false
  in: query
  name: include_remediation_items
  description: Controls whether `remediation_items` are returned in the response body.
ParamIncludeExposures:
  schema:
    type: boolean
    default: true
  in: query
  name: include_exposures
  description: Controls whether `exposures` are returned in the response body. Only valid if `group` is `exposure` or `asset`.
ParamIncludeExposuresQRI:
  schema:
    type: boolean
    default: true
  in: query
  name: include_exposures
  description: Controls whether `exposures` are returned in each `remediation-item` in the response.
ParamDetailedFilters:
  schema:
    type: boolean
    default: true
  in: query
  name: detailed_filters
  description: |-
    Controls the format of `filters` in the response. If set to `false` (default), the
    filters are returned in the same format as they are in the remediation items, plain
    strings of `{type}:{key}`, e.g. `"subnet:/aws/us-east-1/subnet/subnet-123abc"`. If set
    to `true`, filters are returned as objects that contains a `"count"`, `"key"`,`"name"`,
    and `"type"` for rich display in a UI. Note that the `"count"` value on each filter is
    the number of `remediation-item`s that contain that filter (or in the case of
    `"category"` filters, the number or `remediation-item`s associated with a
    remediation/exposure that contains the category).
ParamCategory:
  schema:
    type: string
  in: query
  name: category
  description: When computing threatiness, only include vulnerabilities related to assets if those vulnerabilities include the given category.
ParamExtras:
  schema:
    type: string
  in: query
  name: extras
  description: A comma-delimited list of asset types to fetch in addition to the base topology.
ParamLimit:
  schema:
    type: integer
  in: query
  name: limit
  description: |-
    If given, limit the returned results to the first N items. The summary and filters, if
    returned, will be computed exclusively from the limited results (not the full result
    set). Note that it limits the number of exposures/remediations returned, but that the
    summary counts are generated based on the full data set before applying the limit.
ParamSort:
  schema:
    type: string
    default: severity,threatiness
    enum:
      - asset_count
      - exposures_count
      - severity
      - threatiness
      - vinstances_count
  in: query
  name: sort
  description: |-
    Controls how to order the exposures/remediations. Must be a CSV of at least one of the
    allowed values. Note that `asset_count` will not work with `group=asset`.
