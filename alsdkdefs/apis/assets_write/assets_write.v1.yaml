openapi: 3.0.2
info:
  title: assets_write
  version: "1.0"
  contact:
    email: support@alertlogic.com
    name: Alert Logic Support
    url: https://support.alertlogic.com
  x-alertlogic-iws-service:
    type: public
  description: |-
    The assets writer interface for consumers
    # Assets Write

    ### <a id="api-_-asset-types"></a>Supported Asset Types

    The following are the currently supported asset types:

    * `"access-level"`
    * `"acl"`
    * `"acl-entry"`
    * `"agent"`
    * `"appliance"`
    * `"application"`
    * `"application-name"`
    * `"assessment-spec"`
    * `"auto-scaling-group"`
    * `"billing-report"`
    * `"cgw"`
    * `"cipher-policy"`
    * `"cloud-trail"`
    * `"collector"`
    * `"config-delivery-channel"`
    * `"configuration-recorder"`
    * `"container"`
    * `"container-image"`
    * `"data-service"`
    * `"db-instance"`
    * `"db-subnet-group"`
    * `"deployment"`
    * `"dns-record-set"`
    * `"dns-zone"`
    * `"external-dns-name"`
    * `"external-ip"`
    * `"group"`
    * `"host"`
    * `"igw"`
    * `"image"`
    * `"instance-profile"`
    * `"kms-key"`
    * `"launch-config"`
    * `"listener"`
    * `"load-balancer"`
    * `"netflow-log"`
    * `"network-interface"`
    * `"nsg"`
    * `"policy"`
    * `"public-ip-address"`
    * `"redshift-cluster"`
    * `"region"`
    * `"remediation"`
    * `"remediation-item"`
    * `"role"`
    * `"route"`
    * `"route-entry"`
    * `"s3-acl"`
    * `"s3-bucket"`
    * `"sg"`
    * `"sns-subscription"`
    * `"sns-topic"`
    * `"subnet"`
    * `"tag"`
    * `"user"`
    * `"vgw"`
    * `"volume"`
    * `"vpc"`
    * `"vpnconn"`
    * `"vulnerability"`
    * `"zone"`

    #### <a id="api-_-vulnerable-asset-types"></a>Vulnerable Asset Types

    The following asset types can have vulnerabilities declared against them:

    * `"acl"`
    * `"cloud-trail"`
    * `"collector"`
    * `"db-instance"`
    * `"deployment"`
    * `"dns-zone"`
    * `"external-dns-name"`
    * `"external-ip"`
    * `"host"`
    * `"igw"`
    * `"image"`
    * `"instance-profile"`
    * `"kms-key"`
    * `"load-balancer"`
    * `"nsg"`
    * `"redshift-cluster"`
    * `"region"`
    * `"remediation"`
    * `"remediation-item"`
    * `"role"`
    * `"route"`
    * `"s3-bucket"`
    * `"sg"`
    * `"user"`
    * `"volume"`
    * `"vpc"`
    * `"vulnerability"`

    #### <a id="api-_-deprecated-asset-types"></a>Deprecated Asset Types

    The following types are deprecated but still supported; their preferred type names are mapped below:

    | Deprecated type name | Actual type name      |
    |----------------------|-----------------------|
    |`"environment"`       |`"deployment"`         |
    |`"location"`          |`"region"`             |
    |`"vnet"`              |`"vpc"`                |
    |`"vm"`                |`"host"`               |
    |`"vm-scale-set"`      |`"auto-scaling-group"` |

    Additionally, assets of type "tag" no longer need to be declared. Instead, "tag" assets are
    automatically derived from the presence of relationships to them declared on other assets.
    Only those "tag" relationships need to be declared.

    ### <a id="api-_-tag-rel-constraints"></a>Special Tag Relationship Constraints

    #### Tag names should be unique

    Because of the nature of tagging, assets may only be related to a single tag asset per unique
    `tag_name`. That is, a single asset **may not** be concurrently related to the tags `test: example1`
    and `test: example2`. Thus, when updating relationships (e.g., via operations like
    [declare_asset](#api-DeclareModify-DeclareAsset) or
    [declare_relationships](#api-DeclareModify-DeclareRelationships)), **only** the most recent
    relationship of type `tag` with a given `tag_name` will be retained.

    For technical context, asset tag names are derived from their asset key, which has the form:

    ```
    {ignored_prefix}/tag/key/{tag_name}/value/{tag_value}
    ```

    This means that, if an existing asset has a relationship to a tag like
    `/tag/key/test/value/example1` declared by **any** scope, and another client declares a relationship
    to `/tag/key/test/value/example2` in **any** scope, the relationship to
    `/tag/key/test/value/example1` will be superseded by the relationship to
    `/tag/key/test/value/example2`, and it will be deleted from the asset's `"relationships"` during
    the operation that declares the relationship to`/tag/key/test/value/example2`.

    Moreover, if a client declares relationships on a single asset to **multiple** tag assets with the
    same `tag_name`, the conflict will be resolved by retaining only the last instance in the
    `"relationships"` list, in addition to the removal of any previously existing relationships to tags
    with the same `tag_name`.

    #### Relationships must be declared on the tagged asset

    Tag assets should no longer be declared. To represent a tagged asset, declare a tag relationship on
    the tagged asset.

    For example, when representing a host asset with key `/aws/host1` and tagged with
    key `foo` and value `bar`, a relationship should be declared from the host asset `/aws/host1`
    to tag asset `/tag/key/foo/value/bar`.

    ### <a id="api-_-merge-properties"></a>Merging asset properties

    When declaring asset properties using operations like
    [declare_asset](#api-DeclareModify-DeclareAsset) or
    [declare_properties](#api-DeclareModify-DeclareProperties), the given properties are merged onto the
    existing asset using a complete replacement of each top-level property. For use cases where it is
    necessary to update a nested sub-property without eliminating its peer sub-properties, the client
    may pass a top-level path to the sub-property, with nested sub-properties separated by the period
    (`.`) character within the top-level property. Note that this behavior may also be used to declare
    new nested properties, avoiding the verbosity of expressing nested JSON.

    For example, given the existing asset:

    ```json
    {
      "scope_example_my-property" : {
        "sub-property-1": {
          "sub-sub-property-1": "update_me",
          "sub-sub-property-2": "do_not_delete"
        },
        "sub-property-2": "do_not_delete"
      }
    }
    ```

    If you wanted to update the property `"sub-sub-property-1"` above, without erasing
    `"sub-property-2"` or `"sub-sub-property-2"`, you could do so by updating the path
    `"my-property.sub-property-1.sub-sub-property-1"`; for example:

    ```json
    {
      "operation": "declare_properties",
      "scope": "example",
      "properties": {
        "my-property.sub-property-1.sub-sub-property-1": "updated"
      }
    }
    ```

    This would result in the asset's properties being merged accordingly, preserving
    the existing peer properties throughout the path:

    ```json
    {
      "scope_example_my-property" : {
        "sub-property-1": {
          "sub-sub-property-1": "updated",
          "sub-sub-property-2": "do_not_delete"
        },
        "sub-property-2": "do_not_delete"
      }
    }
    ```

    #### Merge properties restrictions

    Note that you cannot merge nested properties into assets with an existing parent property that is
    not an object. In the examples above, you cannot update the path
    `"my-property.sub-property-2.sub-sub-property-2"` in the asset, because the parent path
    `"my-property.sub-property-2"` is a string, not an object. Requests to perform invalid merges like
    this will result in a `400 Bad Request` error.

paths:
  /assets_write/v1/{account_id}/deployments/{deployment_id}/assets:
    parameters:
      - $ref: '#/components/parameters/UrlParamAccountId'
      - $ref: '#/components/parameters/UrlParamDeploymentId'
    put:
      operationId: declare
      summary: Declare and Modify Asset(s)
      description: |-
        ## Declare Functions

        ### Create Network (operation:create_network)
        Declares (creates) a region and a network (an alias for VPC) with relationship to the region and
        with a claim key.

        ### Declare Applications (operation:declare_applications)

        `declare_applications` creates a set of assets of type `"application"` and adds relationships to the
        target asset, specified by the `type` and `key` parameters. If such asset doesn't exist, then
        declare_applications returns a HTTP 404 response. Declaring applications overwrites any existing
        applications of the same scope for that asset. declare_applications returns a HTTP 204 response
        upon success.

        ### Declare Environments (operation:declare_environment)
        Declares (creates) a deployment (n√©e environment) in assets.

        The request must contain the environment's parameters in a JSON structure with the key items
        detailed below.

        ### Declare Vulnerabilities (operation:declare_vulnerabilities)
        Creates vulnerabilities and remediations and adds relationships to the asset
        which is vulnerable, specified by the `type` and `key` parameters. If such asset doesn't exist,
        then declare_vulnerabilities returns a HTTP 404 response. Declaring vulnerabilities overwrites
        any existing vulnerabilities of the same scope for that asset.

        ## Declare and Modify

        ### Accumulate Statistics (operation:accumulate)

        accumulates agents and appliances statistics. The accumulate operation may be called any number of
        times for the same asset. The updated asset will contain a statistics property with sub-properties
        for each accumulated statistic. This is intended to record collection statistics based on defined
        strategy by collection type on agent and appliance assets. Currently, only `hourly` strategy is
        supported. Hourly strategy records the last 24 calendar hours.

        Note that the response `last_hour` value is the previous hour, not the current hour value.
        `last_day` represents the sum of the all previous hours but the current hour.

        ### Declare Access Levels (operation:declare_access_levels)
        Declares access levels for the assets specified. If `asset`, `destination`, or
        any of `derives_from` assets don't exist, then declare_access_levels returns an `HTTP 404`
        response.

        ### Declare Asset (operation:declare_asset)

        `declare_asset` creates or [merges](#api-_-merge-properties) an asset and its relationships.
        declare_asset may be called any number of times for the same asset, with subsets of properties
        and relationships, and the assets service will merge the data. If a relationship is declared
        to an asset that doesn't exist, this asset will not be returned by assets_query until it is
        declared.

        ### Declare Properties (operation:declare_properties)

        declare_properties [merges properties](#api-_-merge-properties) with an existing asset. All fields
        are required, except `conditions` and `create`. This operation returns a HTTP/2 201 code on
        success.

        The following algorithm applies when calling `declare_properties`
        on a non-existent asset:

        - Apply the operation if the `create` property in the request body is `true`
        - Discard the operation if the `create` property in the request body is `false`
        - Apply the operation if there is no `create` property in the request body, but the `conditions` property is present
        - Discard the operation if both the `create` and `conditions` properties are not present in the request body

        The following algorithm applies when calling `declare_properties` on an existing asset:
        - Test conditions against the asset
          - If `conditions` is not present in the request body, or is present and the value is an empty list, apply the operation
          - if `conditions` is present and at least one condition is present
            - If all conditions are satisfied, apply the operation
            - If at least one condition is not satisfied, discard the operation and return a 304 status code
            - If, when applying the operation, a version mismatch is hit, retry the operation including the
              conditions evaluation and resulting behaviours

        There are two classes of conditions: *presence tests* and *comparisons*. All conditions require
        `property` field, which holds the name of the property being tested, and `type` field, which
        defines the test to be applied. Comparisons also must provide `value` field with value to compare
        existing data to.

        The following presence tests are defined:

        - `"if-defined"` - check whether existing asset has the property being tested
        - `"if-undefined"` - check whether existing asset doesn't have that property

        Following comparisons are defined:

        - `"if-equal"` - true if existing asset has the property being tested and its value is equal to
          the given one
        - `"if-not-equal"` - true if existing asset's value of the property being tested is not equal to
          the given one or existing asset has no such property
        - `"if-less"` - true if existing asset's value of the property being tested is less than the given
          one or existing asset has no such property
        - `"if-less-or-equal"` - true if existing asset's value of the property being tested is less than
          or equal to the given one or existing asset has no such property
        - `"if-greater"` - true if existing asset's value of the property being tested is greater than the
          given one or existing asset has no such property
        - `"if-greater-or-equal"` - true if existing asset's value of the property being tested is greater
          than or equal to the given one or existing asset has no such property

        ### Declare Relationships (operation:declare_relationships)

        `declare_relationships` creates or merges relationships for an existing asset. Calling
        `declare_relationships` on a non-existent asset will return a 404.

        ## Removals

        ### Remove Asset (operation:remove_asset)
        Deletes an existing asset and its relationships.

        ### Remove Assets (operation:remote_assets)
        Deletes multiple existing assets and their relationships.

        ### Remove Properties (operation:remove_properties)
        Completely removes the given properties (or nested properties) from the given asset.

        ### Remove Relationships (operation:remove_relationships)
        Deletes specific relationships for an existing asset.
      tags:
        - Declare Functions
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateNetworkRequestBody'
                - $ref: '#/components/schemas/DeclareApplicationsRequestBody'
                - $ref: '#/components/schemas/DeclareEnvironmentsRequestBody'
                - $ref: '#/components/schemas/DeclareVulnerabilitiesRequestBody'
                - $ref: '#/components/schemas/AccumulateRequestBody'
                - $ref: '#/components/schemas/DeclareAccessLevelsRequestBody'
                - $ref: '#/components/schemas/DeclareAssetRequestBody'
                - $ref: '#/components/schemas/DeclarePropertiesRequestBody'
                - $ref: '#/components/schemas/DeclareRelationshipsRequestBody'
                - $ref: '#/components/schemas/RemoveAssetRequestBody'
                - $ref: '#/components/schemas/RemoveAssetsRequestBody'
                - $ref: '#/components/schemas/RemovePropertiesRequestBody'
                - $ref: '#/components/schemas/RemoveRelationshipsRequestBody'
            examples:
              Create Network Request Body Example:
                $ref: '#/components/examples/CreateNetworkRequestBodyExample'
              Declare Applications Request Body Example:
                $ref: '#/components/examples/DeclareApplicationsRequestBodyExample'
              Declare Environments Request Body Example:
                $ref: '#/components/examples/DeclareEnvironmentsRequestBodyExample'
              Declare Vulnerabilities Request Body Example:
                $ref: '#/components/examples/DeclareVulnerabilitiesRequestBodyExample'
              Accumulate Request Body Example:
                $ref: '#/components/examples/AccumulateRequestBodyExample'
              Declare Access Levels Request Body Example:
                $ref: '#/components/examples/DeclareAccessLevelsRequestBodyExample'
              Declare Asset Request Body Example:
                $ref: '#/components/examples/DeclareAssetRequestBodyExample'
              Declare Properties Request Body Example:
                $ref: '#/components/examples/DeclarePropertiesRequestBodyExample'
              Declare Properties (create=false) Request Body Example:
                $ref: '#/components/examples/DeclarePropertiesCreateFalseRequestBodyExample'
              Declare Properties (with conditions) Request Body Example:
                $ref: '#/components/examples/DeclarePropertiesWithConditionsRequestBodyExample'
              Declare Relationships Request Body Example:
                $ref: '#/components/examples/DeclareRelationshipsRequestBodyExample'
              Remove Asset Request Body Example:
                $ref: '#/components/examples/RemoveAssetRequestBodyExample'
              Remove Assets Request Body Example:
                $ref: '#/components/examples/RemoveAssetsRequestBodyExample'
              Remove Properties Request Body Example:
                $ref: '#/components/examples/RemovePropertiesRequestBodyExample'
              Remove Properties (with conditions) Request Body Example:
                $ref: '#/components/examples/RemovePropertiesWithConditionsRequestBodyExample'
              Remove Relationships Request Body Example:
                $ref: '#/components/examples/RemoveRelationshipsRequestBodyExample'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RemovePropertiesResponse'
                  - $ref: '#/components/schemas/RemoveRelationshipsResponse'
              examples:
                Remove Properties Example:
                  $ref: '#/components/examples/RemovePropertiesExample'
                Remove Relationships Example:
                  $ref: '#/components/examples/RemoveRelationshipsExample'
        "201":
          description: Created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CreateNetworkResponse'
                  - $ref: '#/components/schemas/DeclareEnvironmentsResponse'
                  - $ref: '#/components/schemas/AccumulateResponse'
                  - $ref: '#/components/schemas/DeclareAssetResponse'
                  - $ref: '#/components/schemas/DeclarePropertiesResponse'
                  - $ref: '#/components/schemas/DeclareRelationshipsResponse'
              examples:
                Create Network Example:
                  $ref: '#/components/examples/CreateNetworkExample'
                Declare Environments Example:
                  $ref: '#/components/examples/DeclareEnvironmentsExample'
                Accumulate Statistics Example:
                  $ref: '#/components/examples/AccumulateExample'
                Declare Asset Example:
                  $ref: '#/components/examples/DeclareAssetExample'
                Declare Properties Example:
                  $ref: '#/components/examples/DeclarePropertiesExample'
                Declare Relationships Example:
                  $ref: '#/components/examples/DeclareRelationshipsExample'
        "204":
          description: No Content (Declare Applications, Vulnerabilities, Relationships and Remove Asset(s) successful response)
        "400":
          $ref: '#/components/responses/InvalidOperationOrParameter'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "413":
          $ref: '#/components/responses/RequestEntityTooLarge'
  /assets/v1/{account_id}/deployments/{deployment_id}/batch:
    parameters:
      - $ref: '#/components/parameters/UrlParamAccountId'
      - $ref: '#/components/parameters/UrlParamDeploymentId'
    put:
      operationId: declare_batch
      summary: Declare Batch
      description: |-
        Declares a list of any combination of `declare_asset`, `declare_properties`,
        `remove_properties`, `remove_relationships`, and `declare_relationships` operations.
        Batch operations on the same asset with the same scope may be combined into a single operation.
        **Note that** you should avoid batching operations that could result in different outcomes if
        applied in a different order, for instance, you must not declare and remove the same properties
        or relationships in different operations on the same asset in the same batch. Currently, the API
        may accept it but in the future this behavior will be rejected.
      tags:
        - Declare Functions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeclareBatchRequestBody'
            examples:
              Declare Batch Request Body Example:
                $ref: '#/components/examples/DeclareBatchRequestBodyExample'
              Declare Batch Request Body (transaction) Example:
                $ref: '#/components/examples/DeclareBatchRequestBodyTransactionExample'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeclareBatchResponse'
              examples:
                Declare Batch Example:
                  $ref: '#/components/examples/DeclareBatchExample'
                Declare Batch Transaction Example:
                  $ref: '#/components/examples/DeclareBatchTransactionExample'
        "400":
          $ref: '#/components/responses/InvalidOperationOrParameter'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "413":
          $ref: '#/components/responses/RequestEntityTooLarge'
  /assets_write/v1/{account_id}/assets:
    parameters:
      - $ref: '#/components/parameters/UrlParamAccountId'
    put:
      operationId: asset_group
      summary: Asset Group (Create, Update, Delete)
      description: |-
        ### Create Asset Group (operation:operation)
        Creates an `asset-group` asset.

        ### Delete Asset Group (operation:delete_asset_group)
        Delete an existing `asset-group` asset.

        ### Update Asset Group (operation:update_asset_group)
        Updates an existing `asset-group` asset.
      tags:
        - Asset Groups Operations
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateAssetGroupRequestBody'
                - $ref: '#/components/schemas/DeleteAssetGroupRequestBody'
                - $ref: '#/components/schemas/UpdateAssetGroupRequestBody'
            examples:
              Create Asset Group Request Body Example:
                $ref: '#/components/examples/CreateAssetGroupRequestBodyExample'
              Delete Asset Group Request Body Example:
                $ref: '#/components/examples/DeleteAssetGroupRequestBodyExample'
              Update Asset Group Request Body Example:
                $ref: '#/components/examples/UpdateAssetGroupRequestBodyExample'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CreateAssetGroupResponse'
                  - $ref: '#/components/schemas/UpdateAssetGroupResponse'
              examples:
                Create Asset Group Example:
                  $ref: '#/components/examples/CreateAssetGroupExample'
                Update Asset Group Example:
                  $ref: '#/components/examples/UpdateAssetGroupExample'
        "204":
          description: No Content (Delete Asset Group successful response)
        "304":
          description: Not Modified (Update Asset Group no-op response)
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
servers:
  - url: https://api.cloudinsight.alertlogic.com
    x-alertlogic-session-endpoint: true
    description: production (US)
  - url: https://api.cloudinsight.alertlogic.co.uk
    description: production (UK)
    x-alertlogic-session-endpoint: true
  - url: https://api.product.dev.alertlogic.com
    description: integration
tags:
  - name: Declare Functions
    description: Declare Functions
  - name: Asset Groups Operations
    description: Asset Groups Operations
components:
  securitySchemes:
    x-aims-auth-token:
      name: x-aims-auth-token
      type: apiKey
      in: header
      description: AIMS Authentication Token
  schemas:
    # Request Params
    ConditionsParam:
      type: array
      items:
        type: object
        properties:
          property:
            type: string
          type:
            type: string
          value:
            type: string
      description: |-
        A list of conditions evaluated against the asset being modified. Scope is applied to
        property names used in conditions same way as described above, e.g. if scope is `"aws"`
        and the name of the property used in a condition (value of the `"property"` field) is
        `"foo"`, then condition will be evaluated against `"scope_aws_foo"` property of the asset
        being modified.
    EnvironmentIdParam:
      type: string
      description: |-
        The ID of the environment source as represented in the sources service (uppercase UUID string).
        Should be the same as the `deployment_id` in the URL.
    ExclusiveParam:
      type: string
      description: |-
        This parameter can be used when the `"relationships"` parameter is used. When this
        parameter is set to `"scope"`, it will replace all relationships of the specified scope
        with those provided. When it's set to `"type"`, it will replace all relationships of the
        specified type(s) and scope with those provided. When it's set to `"complete"`, it will
        replace all relationships with those provided. If the exclusive parameter is omitted,
        all relationships provided will be added to the asset.
      enum:
        - scope
        - type
        - complete
    ExclusiveTypesParam:
      type: array
      description: |-
        An array of asset types. This parameter can be used with the `exclusive=type` parameter.
        When using `exclusive=type`, these asset types will be considered for exclusion within
        the given `"scope"` in addition to the asset types of the `"relationships"` in the
        request. This allows clients to effectively declare **empty** relationships for
        specific asset type(s).
    GroupNameParam:
      type: string
      description: |-
        The unique name for the `asset-group` asset, such as `my-group`. This will be the same
        as the asset `key`. The name must be 500 characters or less in length, and may include
        multilingual letters, numbers, backslash (`\`), colon (`:`), hyphen (`-`), period (`.`),
        plus sign (`+`), slash (`/`), underscore (`_`), and space (` `).
    GroupPropertiesParam:
      type: object
      description: |-
        An object of properties pertaining to the asset being created. Note that an asset group
        can contain a `scopes` property, or `groups` and `groups_match` properties, but not
        both.
      properties:
        groups:
          description: |-
            An array of asset group names that define the asset groups linked to this asset group.
          type: array
          items:
            type: string
            description: An asset-group name
        groups_match:
          description: |-
            Controls the aggregation logic for the groups in the `groups` property.
            * `all` - Include any asset that is present in all of the groups in `groups`.
            * `any` - Include any asset that is present in any of the groups in `groups`.
          enum:
            - all
            - any
          type: string
        scopes:
          description: |-
            An array of scope objects that define the asset membership in the group. Each `scope`
            object represents distinct, independent criteria for group inclusion. If an asset meets
            the criteria defined in **any** scope, it will be included in the group.
          type: array
          items:
            type: object
            properties:
              include:
                description: |-
                  An array of topological constraints on assets that define the asset membership in the
                  group. Examples: `deployment:any`, `tag:/tag/name/environment/value/production`,
                  `host:!/aws/us-east-1/i-1234`. Any groupable asset that meets the constraints on it
                  (and whose topological ancestor assets meet the constraints on them) will be included
                type: array
                items:
                  type: string
              exclude:
                description: |-
                  An array of topological constraints on assets that define the asset membership in the
                  group. Examples: `deployment:any`, `tag:/tag/name/environment/value/production`,
                  `host:!/aws/us-east-1/i-1234`. Any groupable asset that meets the constraints on it
                  (and whose topological ancestor assets meet the constraints on them) will be
                  **excluded** from the group, even if they meet the `includes` criteria.
                type: array
                items:
                  type: string
              asset_types:
                description: |-
                  An array of asset types strings that define what type(s) of assets can be in the group.
                  If set, only assets of the given type(s) will be included in the group. If not, all
                  groupable asset types are eligible to be included in the group.
                type: array
                items:
                  type: string
    KeyParam:
      type: string
      description: |-
        The opaque, unique key for this asset, such as `"/aws/us-east-1/host/i-1234567"`. The
        key and type parameters form a unique identifier for any asset.
    PropertiesParam:
      type: string
      description: |-
        An object whose properties pertain to the asset being created or modified. This may
        be omitted if no properties are needed. Scope is applied to properties in the following
        way: if scope is `"aws"` and the property is `"foo": "bar"`, it becomes
        `"scope_aws_foo": "bar"`. When subsequently querying the asset, some properties are
        promoted depending on the asset type. These properties are
        [merged](#api-_-merge-properties) onto an existing asset's properties, if present.
    RelationshipsParam:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/KeyParam'
          type:
            $ref: '#/components/schemas/TypeParam'
      description: |-
        A list of objects describing relationships to other assets. Each object in this list
        must have a `"type"` field and a `"key"` describing the type and key of asset the new
        or updated asset will have a relationship to. The object may also have a
        `"relationship_type"` field indicating the type of relationship to declare. Note that
        relationships to and from type `"tag"` have [special constraints](#api-_-tag-rel-constraints)
        that clients should be aware of.
    ScopeParam:
      type: string
      description: |-
        The declaring software's authority or area of function. For example, the scan subsystem
        declaring vulnerabilities passes scope `"scan"`, and the UI declaring a credential for
        an asset passes scope `"config"`. `cloud_explorer`, responsible for discovering
        deployments (environments), passes `"aws"`. The scope must match the regex pattern
        `[0-9A-Za-z-]`.
    StrategyParam:
      type: string
      description: |-
        This parameter is used by the accumulate operation. Based on this paramenter, the
        `"accumulate"` operation will increment the current calendar hour counter, shift hours
        when the next hour is reached, etc. Currently, only `hourly` is supported.
    TypeParam:
      type: string
      description: |-
        The type of the asset being created or modified. It must be one of the
        [supported asset types](#api-_-asset-types). See also the
        [deprecated asset types](#api-_-deprecated-asset-types) for additional types that are
        supported through asset type aliasing. Together, the `"key"` and `"type"` parameters
        form a unique identifier for any asset within a deployment.
    VulnerableTypeParam:
      type: string
      description: |-
        The type of the vulnerable asset being referred to. It must be one of the
        [supported vulnerable asset types](#api-_-vulnerable-asset-types). Together, the
        `"key"` and `"type"` parameters form a unique identifier for any asset within a deployment.
    # Request Bodies
    CreateNetworkRequestBody:
      title: Create Network Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `create_network`.
          enum:
            - create_network
        scope:
          type: string
          description: Currently limited to `"datacenter"`, will be extended to any value later.
        properties:
          $ref: '#/components/schemas/PropertiesParam'
      required:
        - operation
        - scope
    DeclareApplicationsRequestBody:
      title: Declare Applications Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `declare_applications`.
          enum:
            - declare_applications
        destinations:
          type: array
          description: |-
            A list of lists representing the applications. Each sublist must have `id` (string) and a JSON object
            that represents application properties (may be empty). See the example.
        type:
          $ref: '#/components/schemas/TypeParam'
        key:
          $ref: '#/components/schemas/KeyParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
      required:
        - operation
        - destinations
        - type
        - key
        - scope
    DeclareEnvironmentsRequestBody:
      title: Declare Environments Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `declare_environment`.
          enum:
            - declare_environment
        environment_id:
          $ref: '#/components/schemas/EnvironmentIdParam'
        environment_type:
          type: string
          description: The type of environment to be declared (e.g. `"aws"`, `"azure"`).
        environment_type_id:
          type: string
          description: |-
            The native account ID for the cloud provider (AWS account ID, Azure subscription ID).
        scope:
          $ref: '#/components/schemas/ScopeParam'
        properties:
          $ref: '#/components/schemas/PropertiesParam'
      required:
        - operation
        - environment_id
        - environment_type
        - scope
    DeclareVulnerabilitiesRequestBody:
      title: Declare Vulnerabilities Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `declare_vulnerability`.
          enum:
            - declare_vulnerability
        type:
          $ref: '#/components/schemas/VulnerableTypeParam'
        key:
          $ref: '#/components/schemas/KeyParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
        vulnerabilities:
          type: array
          description: |-
            A list of objects representing the vulnerabilities. The dict must have a `id` field
            representing the vulnerability id (typically a UUID), a `properties` object, and a
            `remediation` object. The `properties` object is required and **must** include the
            `vulnerability_id` (string), though the following fields are suggested
            (all are strings, unless noted):

            * `name` - short description of vulnerability
            * `ccss_score` - number,
            * `ccss_vector`
            * `cve`
            * `cvss_score` - number,
            * `cvss_vector`
            * `cwe`
            * `description` - a long description of the vulnerability
            * `port` - integer, valid port
            * `ip_protocol` - `"tcp"`, `"udp"`, etc.
            * `categories` - a list of string categories for the vulnerability
            * `finding_type` - a single string describing the type of vulnerability

            The `remediation` object must have an `id` field (also typically a UUID) and a
            `properties` object. The following remediation fields are suggested (all are strings):

            * `name`
            * `description`
          items:
            type: object
            properties:
              id:
                type: string
              properties:
                type: object
              remediation:
                type: object
                properties:
                  id:
                    type: string
                  properties:
                    type: object
                  name:
                    type: string
                  description:
                    type: string
                required:
                  - id
                  - properties
              name:
                type: string
                description: Short description of vulnerability.
              ccss_score:
                type: number
              ccss_vector:
                type: array
              cve:
                type: string
              cvss_score:
                type: number
              cwe:
                type: string
              description:
                type: string
                description: A long description of the vulnerability.
              port:
                type: integer
              ip_protocol:
                type: string
              categories:
                type: array
                description: A list of string categories for the vulnerability.
              finding_type:
                type: string
                description: A single string describing the type of vulnerability.
            required:
              - id
              - properties
              - remediation
      required:
        - operation
        - type
        - key
        - scope
        - vulnerabilities
    AccumulateRequestBody:
      title: Accumulate Statistics Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `accumulate`.
          enum:
            - accumulate
        scope:
          $ref: '#/components/schemas/ScopeParam'
        properties:
          type: object
          description: A JSON Object with properties pertaining to the asset being modified. For the `accumulate` operation, this has to be declared and statistics must be present.
        key:
          $ref: '#/components/schemas/KeyParam'
        strategy:
          $ref: '#/components/schemas/StrategyParam'
      required:
        - operation
        - type
        - scope
        - properties
        - key
    DeclareAccessLevelsRequestBody:
      title: Declare Access Levels Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `declare_access_levels`.
          enum:
            - declare_access_levels
        asset:
          type: object
          description: |-
            This field should be an object containing the `type` and `key` of the source asset for
            the access levels you wish to declare.
        scope:
          $ref: '#/components/schemas/ScopeParam'
        access_levels:
          type: array
          description: |-
            A list of objects representing the access levels. Each object must have `derives_from`
            (list of objects) and `destination` (object), each with `type` and `key`, as well as a
            `properties` dict that must contain an `access_type` property. Currently `access_type`
            can only be set to `"admin"`
      required:
        - operation
        - asset
        - scope
        - access_levels
    DeclareAssetRequestBody:
      title: Declare Asset Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `declare_asset`.
          enum:
            - declare_asset
        type:
          $ref: '#/components/schemas/TypeParam'
        key:
          $ref: '#/components/schemas/KeyParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
        properties:
          $ref: '#/components/schemas/PropertiesParam'
        relationships:
          $ref: '#/components/schemas/RelationshipsParam'
        exclusive:
          $ref: '#/components/schemas/ExclusiveParam'
        exclusive_types:
          $ref: '#/components/schemas/ExclusiveTypesParam'
      required:
        - operation
        - type
        - key
        - scope
    DeclareBatchRequestBody:
      title: Declare Batch Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `batch_declare`.
          enum:
            - batch_declare
        transaction:
          type: boolean
          description: |-
            If batch declare is issued with transaction flag enabled all operations run sequentially
            and the batch will fail (abort on spot) as soon as any of the declares is unsuccessful.
            No rollback is performed. For operations that failed "not executed" error will be
            returned (see example). Default: `false`.
        operations:
          type: array
          items:
            type: object
          description: |-
            Any combination of `declare_asset`, `declare_properties`,
            `remove_properties`, `remove_relationships`, and `declare_relationships` operations.
            Batch operations on the same asset with the same scope may be combined into a single operation.
            **Note that** you should avoid batching operations that could result in different outcomes if
            applied in a different order, for instance, you must not declare and remove the same properties
            or relationships in different operations on the same asset in the same batch. Currently, the API
            may accept it but in the future this behavior will be rejected.
      required:
        - operation
        - operations
    DeclarePropertiesRequestBody:
      title: Declare Properties Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `declare_properties`.
          enum:
            - declare_properties
        type:
          $ref: '#/components/schemas/TypeParam'
        key:
          $ref: '#/components/schemas/KeyParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
        properties:
          $ref: '#/components/schemas/PropertiesParam'
        conditions:
          $ref: '#/components/schemas/ConditionsParam'
        create:
          type: boolean
          description: |-
            A flag that determines if an asset should be created by the operation, if it
            does not already exist. This property is presumed to be `true` if not set,
            and a `conditions` list is present in the request body. It is presumed to be `false`
            if not set, and there is no `conditions` list present in the request body.
      required:
        - operation
        - type
        - key
        - scope
        - properties
    DeclareRelationshipsRequestBody:
      title: Declare Relationships Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `declare_relationships`.
          enum:
            - declare_relationships
        type:
          $ref: '#/components/schemas/TypeParam'
        key:
          $ref: '#/components/schemas/KeyParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
        relationships:
          $ref: '#/components/schemas/RelationshipsParam'
        exclusive:
          $ref: '#/components/schemas/ExclusiveParam'
        exclusive_types:
          $ref: '#/components/schemas/ExclusiveTypesParam'
      required:
        - operation
        - type
        - key
        - scope
        - relationships
    RemoveAssetRequestBody:
      title: Remove Asset Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `remove_asset`.
          enum:
            - remove_asset
        type:
          $ref: '#/components/schemas/TypeParam'
        key:
          $ref: '#/components/schemas/KeyParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
      required:
        - operation
        - type
        - key
        - scope
    RemoveAssetsRequestBody:
      title: Remove Assets Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `remove_assets`.
          enum:
            - remove_assets
        assets:
          type: array
          items:
            type: object
            properties:
              type:
                $ref: '#/components/schemas/TypeParam'
              key:
                $ref: '#/components/schemas/KeyParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
      required:
        - operation
        - assets
        - scope
    RemovePropertiesRequestBody:
      title: Remove Properties Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `remove_properties`.
          enum:
            - remove_properties
        property_names:
          type: array
          items:
            type: string
          description: |-
            A list of property names to remove; these can either be strings or lists of strings for
            nested property paths. Property names may only be composed of characters `[a-zA-Z0-9_]`.
        type:
          $ref: '#/components/schemas/TypeParam'
        key:
          $ref: '#/components/schemas/KeyParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
        conditions:
          $ref: '#/components/schemas/ConditionsParam'
      required:
        - operation
        - property_names
        - type
        - key
        - scope
    RemoveRelationshipsRequestBody:
      title: Remove Relationships Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `remove_relationships`.
          enum:
            - remove_relationships
        relationships:
          $ref: '#/components/schemas/RelationshipsParam'
        type:
          $ref: '#/components/schemas/TypeParam'
        key:
          $ref: '#/components/schemas/KeyParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
      required:
        - operation
        - relationships
        - type
        - key
        - scope
    CreateAssetGroupRequestBody:
      title: Create Asset Group Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `create_asset_group`.
          enum:
            - create_asset_group
        properties:
          $ref: '#/components/schemas/GroupPropertiesParam'
        name:
          $ref: '#/components/schemas/GroupNameParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
      required:
        - operation
        - properties
        - name
        - scope
    DeleteAssetGroupRequestBody:
      title: Delete Asset Group Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `delete_asset_group`.
          enum:
            - delete_asset_group
        name:
          $ref: '#/components/schemas/GroupNameParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
      required:
        - operation
        - name
        - scope
    UpdateAssetGroupRequestBody:
      title: Update Asset Group Request Body
      type: object
      properties:
        operation:
          type: string
          description: This must be `update_asset_group`.
          enum:
            - update_asset_group
        properties:
          $ref: '#/components/schemas/GroupPropertiesParam'
          description: An object of properties pertaining to the asset updated.
        name:
          $ref: '#/components/schemas/GroupNameParam'
        scope:
          $ref: '#/components/schemas/ScopeParam'
      required:
        - operation
        - properties
        - name
        - scope
    AccountId:
      type: string
      description: AIMS account ID
    DeploymentId:
      type: string
      description: Deployment ID
    AssetKey:
      type: string
      description: Asset Key
    AssetType:
      type: string
      description: Asset Type
    GroupKey:
      type: string
      description: Group Key
    GroupProperties:
      type: object
      description: Group Properties
      properties:
        scopes:
          type: array
          items:
            type: object
            properties:
              include:
                type: array
                items:
                  type: string
              exclude:
                type: array
                items:
                  type: string
              asset_types:
                type: array
                items:
                  type: string
    GroupType:
      type: string
      description: Group Type
      enum:
        - asset-group
    TimestampMS:
      type: number
      description: Milliseconds since Unix Epoch
    Version:
      title: Version
      type: number
      description: Object Version
    Relationships:
      title: Relationships
      description: Asset relationships
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/AssetKey'
          type:
            $ref: '#/components/schemas/AssetType'
    InvalidParameter:
      title: Invalid Parameter
      type: object
      properties:
        message:
          type: string
      required:
        - message
    InvalidOperation:
      title: Invalid Operation
      type: object
      properties:
        error:
          type: string
      required:
        - error
    CreateNetworkResponse:
      title: Create Network response
      type: object
      properties:
        key:
          $ref: '#/components/schemas/AssetKey'
    DeclareApplicationsResponse:
      title: Declare Applications Response
      type: object
      properties:
        operation:
          type: string
        type:
          $ref: '#/components/schemas/AssetType'
        key:
          $ref: '#/components/schemas/AssetKey'
        scope:
          type: string
        destinations:
          type: array
          items:
            type: array
    DeclareEnvironmentsResponse:
      title: Declare Environments Response
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Version'
        type:
          $ref: '#/components/schemas/AssetType'
        relationships:
          $ref: '#/components/schemas/Relationships'
        properties:
          type: object
        modified_on:
          $ref: '#/components/schemas/TimestampMS'
        key:
          $ref: '#/components/schemas/AssetKey'
        deployment_id:
          $ref: '#/components/schemas/DeploymentId'
        deleted_on:
          $ref: '#/components/schemas/TimestampMS'
        declared:
          type: boolean
        created_on:
          $ref: '#/components/schemas/TimestampMS'
        account_id:
          $ref: '#/components/schemas/AccountId'
    AccumulateResponse:
      title: Accumulate Response
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AssetType'
        relationships:
          $ref: '#/components/schemas/Relationships'
        properties:
          type: object
          properties:
            statistics:
              type: object
        modified_on:
          $ref: '#/components/schemas/TimestampMS'
        key:
          $ref: '#/components/schemas/AssetKey'
        deployment_id:
          $ref: '#/components/schemas/DeploymentId'
        account_id:
          $ref: '#/components/schemas/AccountId'
    DeclareAssetResponse:
      title: Declare Asset Response
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AssetType'
        relationships:
          $ref: '#/components/schemas/Relationships'
        key:
          $ref: '#/components/schemas/AssetKey'
        deployment_id:
          $ref: '#/components/schemas/DeploymentId'
        account_id:
          $ref: '#/components/schemas/AccountId'
    DeclareBatchResponse:
      title: Declare Batch Response
      type: object
      properties:
        return_values:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
                description: HTML response code (e.g. 201, 400, 404, 413)
              value:
                type: object
                description: The operation resulting object (e.g Declare Asset response)
    DeclarePropertiesResponse:
      title: Declare Properties Response
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AssetType'
        key:
          $ref: '#/components/schemas/AssetKey'
        deployment_id:
          $ref: '#/components/schemas/DeploymentId'
        account_id:
          $ref: '#/components/schemas/AccountId'
    DeclareRelationshipsResponse:
      title: Declare Relationships Response
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AssetType'
        relationships:
          $ref: '#/components/schemas/Relationships'
        key:
          $ref: '#/components/schemas/AssetKey'
        deployment_id:
          $ref: '#/components/schemas/DeploymentId'
        account_id:
          $ref: '#/components/schemas/AccountId'
    RemovePropertiesResponse:
      title: Remove Properties Response
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AssetType'
        key:
          $ref: '#/components/schemas/AssetKey'
        deployment_id:
          $ref: '#/components/schemas/DeploymentId'
        account_id:
          $ref: '#/components/schemas/AccountId'
    RemoveRelationshipsResponse:
      title: Remove Relationships Response
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AssetType'
        relationships:
          $ref: '#/components/schemas/Relationships'
        key:
          $ref: '#/components/schemas/AssetKey'
        deployment_id:
          $ref: '#/components/schemas/DeploymentId'
        account_id:
          $ref: '#/components/schemas/AccountId'
    CreateAssetGroupResponse:
      title: Create Asset Group Response
      type: object
      properties:
        account_id:
          $ref: '#/components/schemas/AccountId'
        created_on:
          $ref: '#/components/schemas/TimestampMS'
        declared:
          type: boolean
        deleted_on:
          $ref: '#/components/schemas/TimestampMS'
        deployment_id:
          $ref: '#/components/schemas/DeploymentId'
        key:
          $ref: '#/components/schemas/GroupKey'
        modified_on:
          $ref: '#/components/schemas/TimestampMS'
        properties:
          $ref: '#/components/schemas/GroupProperties'
        relationships:
          $ref: '#/components/schemas/Relationships'
        type:
          $ref: '#/components/schemas/GroupType'
        version:
          $ref: '#/components/schemas/Version'
    UpdateAssetGroupResponse:
      title: Update Asset Group Response
      type: object
      properties:
        account_id:
          $ref: '#/components/schemas/AccountId'
        created_on:
          $ref: '#/components/schemas/TimestampMS'
        declared:
          type: boolean
        deleted_on:
          $ref: '#/components/schemas/TimestampMS'
        deployment_id:
          $ref: '#/components/schemas/DeploymentId'
        key:
          $ref: '#/components/schemas/GroupKey'
        modified_on:
          $ref: '#/components/schemas/TimestampMS'
        properties:
          $ref: '#/components/schemas/GroupProperties'
        relationships:
          $ref: '#/components/schemas/Relationships'
        type:
          $ref: '#/components/schemas/GroupType'
        version:
          $ref: '#/components/schemas/Version'
  parameters:
    UrlParamAccountId:
      schema:
        type: string
      name: account_id
      in: path
      required: true
      description: |-
        The AIMS account ID whose assets are being accessed. Only valid account IDs are acceptable.
        Invalid account IDs result in an `HTTP 404 Not Found` or `HTTP 403 Forbidden`, depending on
        the client's access level.
    UrlParamDeploymentId:
      schema:
        type: string
      name: deployment_id
      in: path
      required: true
      description: The ID of the deployment source as represented in the deployments service (uppercase UUID).
  responses:
    # Error responses
    NoContent:
      description: '`No Content`.'
    Unauthorized:
      description: '`Unauthorized`. The provided `x-aims-auth-token` header could not be authenticated.'
    Forbidden:
      description: '`Forbidden`. Insufficient permissions.'
    NotFound:
      description: '`Not Found`. The requested object was not found.'
    BadRequest:
      description: '`Bad Request` An invalid parameter was given in the request (see the response message for details)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameter'
          examples:
            Invalid Asset Key:
              value:
                message: 'Invalid asset key'
    RequestEntityTooLarge:
      description: |-
        `Request Entity Too Large`. The requested object was larger than the maximum allowed size.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                enum:
                  - Request body too large
            required:
              - error
    InvalidOperationOrParameter:
      description: |-
        `Bad Request` An invalid parameter was given in the request (see the response message for details)<br>
        `Bad Request` Returned when an invalid operation is provided in a request.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/InvalidParameter'
              - $ref: '#/components/schemas/InvalidOperation'
          examples:
            Invalid Asset Key:
              value:
                message: 'Invalid asset key'
            Invalid Operation:
              value:
                error: 'Invalid operation'
  examples:
    CreateNetworkExample:
      value:
        key: /dc/network/EDBB4663-12B9-437A-A45D-2461E6569191
    CreateNetworkRequestBodyExample:
      value:
        operation: create_network
        scope: datacenter
        properties:
          network_name: MyNetwork
          cidr_ranges:
          - 10.0.0.0/16
          public_cidr_ranges:
          - 10.0.0.0/16
    DeclareApplicationsRequestBodyExample:
      value:
        operation: declare_applications
        type: host
        key: "/aws/us-east-1/host/i-11112222"
        scope: aws
        destinations:
        - - nginx
          - port: 80
            ip_protocol: tcp
        - - telnet
          - port: 992
            ip_protocol: udp
    DeclareEnvironmentsRequestBodyExample:
      value:
        operation: declare_environment
        environment_id: 9E45B6F4-D8FE-11E7-899D-E382346B56A1
        environment_type: azure
        scope: azure
        properties:
          environment_type_id: 029faa42-36f9-1005-91c0-6c400890c2a6
    DeclareEnvironmentsExample:
      value:
        version: 1
        type: deployment
        relationships: []
        properties:
          scope_internal_environment_type: azure
          scope_internal_environment_id: 9E45B6F4-D8FE-11E7-899D-E382346B56A1
          scope_internal_deployment_type: azure
          scope_internal_deployment_id: 9E45B6F4-D8FE-11E7-899D-E382346B56A1
          scope_azure_environment_type_id: 029faa42-36f9-1005-91c0-6c400890c2a6
        modified_on: 1512403094689
        key: "/al/01000001/deployment/azure/9E45B6F4-D8FE-11E7-899D-E382346B56A1"
        deployment_id: 9E45B6F4-D8FE-11E7-899D-E382346B56A1
        deleted_on: 0
        declared: true
        created_on: 1512403094662
        account_id: '01000001'
    DeclareVulnerabilitiesRequestBodyExample:
      value:
        operation: declare_vulnerabilities
        scope: scan
        type: host
        key: "/aws/us-east-1/host/i-11112222"
        vulnerabilities:
        - id: a29e9b3a-ec66-441d-8960-b1f3dd3bc558
          properties:
            vulnerability_id: f094ed697c59e1059f7e2a2d5e664e46
            description: "[Spoilers] Voldemort has split his soul into parts and can't be
              killed."
            categories:
            - security
            finding_type: misconfiguration
          remediation:
            id: 45af6dc6-3677-4a4d-822b-9eff57b99ae8
            properties:
              description: Find all the pieces of Voldemort's soul and destroy them.
    AccumulateRequestBodyExample:
      value:
        operation: accumulate
        type: agent
        scope: stats
        key: "/agent/D298CD7C-CEF2-4931-A422-D12D85362340"
        strategy: hourly
        properties:
          metric_name: 1000
    AccumulateExample:
      value:
        account_id: '01000001'
        deployment_id: aws1
        key: "/host/host_name"
        name: host_name
        relationships:
        - key: "/aws/us-east-1/vpc/vpc-11223344"
          type: vpc
        - key: "/aws/us-east-1/vpc/vpc-22334455"
          type: vpc
        type: host
        properties:
          statistics:
            metric_name:
              hours:
                hour_2019022100: 100
                hour_2019022101: 0
                hour_2019022102: 0
                hour_2019022103: 0
                hour_2019022104: 0
                hour_2019022105: 0
                hour_2019022106: 0
                hour_2019022107: 0
                hour_2019022108: 0
                hour_2019022109: 0
                hour_2019022110: 50
                hour_2019022111: 0
                hour_2019022112: 0
                hour_2019022113: 0
                hour_2019022114: 0
                hour_2019022115: 0
                hour_2019022116: 0
                hour_2019022117: 0
                hour_2019022118: 0
                hour_2019022119: 0
                hour_2019022120: 0
                hour_2019022121: 0
                hour_2019022122: 50
                hour_2019022123: 1000
              last_day: 200
              last_hour: 50
    DeclareAccessLevelsRequestBodyExample:
      value:
        operation: declare_access_levels
        scope: test
        asset:
          type: role
          key: "/aws/123412341234/role/Source"
        access_levels:
        - destination:
            type: data-service
            key: "/aws/123412341234/data-service/Dest1"
          derives_from:
          - type: policy
            key: "/aws/123412341234/policy/managed/DF1"
          properties:
            access_type: admin
    DeclareAssetRequestBodyExample:
      value:
        operation: declare_asset
        type: region
        scope: aws
        key: "/aws/us-east-1"
        properties:
          foo: bar
        relationships:
        - key: "/aws/us-east-1/vpc/vpc-11223344"
          type: vpc
        - key: "/aws/us-east-1/vpc/vpc-22334455"
          type: vpc
    DeclareAssetExample:
      value:
        account_id: '01000001'
        deployment_id: aws1
        key: "/aws/us-east-1"
        scope_aws_foo: bar
        relationships:
        - key: "/aws/us-east-1/vpc/vpc-11223344"
          type: vpc
        - key: "/aws/us-east-1/vpc/vpc-22334455"
          type: vpc
        type: region
    DeclareBatchRequestBodyExample:
      value:
        operation: batch_declare
        operations:
        - operation: declare_asset
          type: region
          scope: aws
          key: "/aws/us-east-1"
          properties:
            name: us-east-1
          relationships:
          - key: "/aws/us-east-1/vpc/vpc-11223344"
            type: vpc
          - key: "/aws/us-east-1/vpc/vpc-22334455"
            type: vpc
    DeclareBatchRequestBodyTransactionExample:
      value:
        operation: batch_declare
        transaction: true
        operations:
        - operation: declare_asset
          type: region
          scope: aws
          key: "/aws/us-east-1"
          properties:
            name: us-east-1
          relationships:
          - key: "/aws/us-east-1/vpc/vpc-11223344"
            type: vpc
          - key: "/aws/us-east-1/vpc/vpc-22334455"
            type: vpc
        - operation: declare_asset
          type: region
          scope: aws
          key: "/aws/eu-west-1"
          properties:
            name: eu-west-1
          relationships:
          - key: "/aws/eu-west-1/vpc/vpc-33445566"
            type: vpc
          - key: "/aws/eu-west-1/vpc/vpc-44556677"
            type: vpc
    DeclareBatchExample:
      value:
        return_values:
        - code: 201
          value:
            account_id: '01000001'
            deployment_id: aws1
            key: "/aws/us-east-1"
            scope_aws_name: us-east-1
            relationships:
            - key: "/aws/us-east-1/vpc/vpc-11223344"
              type: vpc
            - key: "/aws/us-east-1/vpc/vpc-22334455"
              type: vpc
            type: region
    DeclareBatchTransactionExample:
      value:
        return_values:
        - code: 500
          value:
            error: timeout
        - code: 400
          value:
            error: not_executed
    DeclarePropertiesRequestBodyExample:
      value:
        operation: declare_properties
        type: host
        scope: aws
        key: "/aws/us-east-1/host/i-55555555"
        properties:
          ip-address: 192.168.3.22
    DeclarePropertiesCreateFalseRequestBodyExample:
      value:
        operation: declare_properties
        type: host
        scope: aws
        key: "/aws/us-east-1/host/i-55555555"
        properties:
          ip-address: 192.168.3.22
        create: false
    DeclarePropertiesWithConditionsRequestBodyExample:
      value:
        operation: declare_properties
        scope: aws
        conditions:
        - property: status_ts
          type: if-less
          value: 1535991006
        type: agent
        key: "/agent/A85A6ECB-A49A-4CE5-8044-2AB6FF79403B"
        properties:
          status: ok
          status_ts: 1535991006
    DeclarePropertiesExample:
      value:
        account_id: '01000001'
        deployment_id: aws1
        key: "/aws/us-east-1/host/i-55555555"
        scope_aws_ip-address: 192.168.3.22
        type: host
    DeclareRelationshipsRequestBodyExample:
      value:
        operation: declare_relationships
        type: region
        scope: aws
        key: "/aws/us-east-1"
        relationships:
        - key: "/aws/us-east-1/vpc/vpc-66778899"
          type: vpc
    DeclareRelationshipsExample:
      value:
        account_id: '01000001'
        deployment_id: aws1
        key: "/aws/us-east-1"
        name: us-east-1
        relationships:
        - key: "/aws/us-east-1/vpc/vpc-11223344"
          type: vpc
        - key: "/aws/us-east-1/vpc/vpc-22334455"
          type: vpc
        - key: "/aws/us-east-1/vpc/vpc-66778899"
          type: vpc
        type: region
    RemoveAssetRequestBodyExample:
      value:
        operation: remove_asset
        scope: aws
        type: host
        key: "/aws/us-east-1/host/i-55555555"
    RemoveAssetsRequestBodyExample:
      value:
        operation: remove_assets
        scope: aws
        assets:
        - type: host
          key: "/aws/us-east-1/host/i-55555555"
        - type: subnet
          key: "/aws/us-east-1/subnet/subnet-88887777"
    RemovePropertiesRequestBodyExample:
      value:
        operation: remove_properties
        type: host
        scope: aws
        key: "/aws/us-east-1/host/i-55555555"
        property_names:
        - ip-address
    RemovePropertiesWithConditionsRequestBodyExample:
      value:
        operation: remove_properties
        type: agent
        scope: aws
        conditions:
        - property: statuses.ffc_Apache_status.timestamp
          type: if-less
          value: 1535991006
        key: "/agent/9836D202-9D2D-402F-80F4-360B802446DD"
        property_names:
        - ip-address
        - - statuses
          - ffc_Apache_status
    RemovePropertiesExample:
      value:
        account_id: '01000001'
        deployment_id: aws1
        key: "/aws/us-east-1/host/i-55555555"
        type: host
    RemoveRelationshipsRequestBodyExample:
      value:
        operation: remove_relationships
        type: region
        scope: aws
        key: "/aws/us-east-1"
        relationships:
        - key: "/aws/us-east-1/vpc/vpc-22334455"
          type: vpc
        - key: "/aws/us-east-1/vpc/vpc-66778899"
          type: vpc
    RemoveRelationshipsExample:
      value:
        account_id: '01000001'
        deployment_id: aws1
        key: "/aws/us-east-1"
        scope_aws_name: us-east-1
        relationships:
        - key: "/aws/us-east-1/vpc/vpc-11223344"
          type: vpc
        type: region
    CreateAssetGroupRequestBodyExample:
      value:
        operation: create_asset_group
        scope: user
        name: PCI Assets
        properties:
          scopes:
          - include:
            - deployment:any
            exclude: []
            asset_types:
            - host
            - db-instance
    CreateAssetGroupExample:
      value:
        account_id: '01000001'
        created_on: 1590790008356
        declared: true
        deleted_on: 0
        deployment_id: AL-INTERNAL-ASSETS
        key: PCI Assets
        modified_on: 1590790008356
        properties:
          scopes:
          - include:
            - deployment:any
            exclude: []
            asset_types:
            - host
            - db-instance
        relationships: []
        type: asset-group
        version: 1
    DeleteAssetGroupRequestBodyExample:
      value:
        operation: delete_asset_group
        scope: user
        name: PCI Assets
    UpdateAssetGroupRequestBodyExample:
      value:
        operation: update_asset_group
        scope: user
        name: PCI Assets
        properties:
          scopes:
          - include:
            - deployment:any
            exclude: []
            asset_types:
            - host
            - db-instance
    UpdateAssetGroupExample:
      value:
        account_id: '01000001'
        created_on: 1590790008356
        declared: true
        deleted_on: 0
        deployment_id: AL-INTERNAL-ASSETS
        key: PCI Assets
        modified_on: 1590790008356
        properties:
          scopes:
          - include:
            - deployment:any
            exclude: []
            asset_types:
            - host
            - db-instance
        relationships: []
        type: asset-group
        version: 2

